[{"content":"选择和安装主题以及自定义 选择主题选择的不仅仅是外观 在开始使用主题之前，我还没意识到选择主题不仅仅是选择喜欢的外观。\n不同的主题自带的文档详细程度，有没有中文文档影响了主题的使用难度。\n（对于我这种有一定折腾能力但不是相关从业程序员的人来说。）\n花费了不少时间在搜索应该怎么使用我选择的主题上。\n还好选择的不是什么小众主题，搜到了不少用户分享的有用内容。\n安装主题的小细节 对于不是程序员的我来说，我真的对git完全不熟悉。\n一开始看见主题安装说明写着没给站点使用git就使用 git clona 安装主题就这么做了，事后才发现不应该这样。\n应该先在站点根目录使用执行 git init 命令。\n然后使用 git submodule add 安装主题。\n这对之后部署来说有好处。\n配合不修改主题本身的自定义，可以在之后方便的更新主题。\n自定义可以不修改主题本身 Hugo会优先读取站点根目录下的，这意味着可以不修改主题的情况下进行自定义。\n也方便以后更新主题什么的。\n补上Stack主题缺失的汉化 其一 Stack主题的i18n\\zh-cn.yaml里有一句是英文。\n在站点根目录新建i18n\\zh-cn.yaml。里面写入下面这段就可以汉化了。\n1 2 3 footer: builtWith: other: 使用 {{ .Generator }} 搭建 其二 Stack主题的exampleSite（示例站点）中左侧菜单中归档顶部显示categories（没有汉化文件）。\n在站点根目录新建content\\categories\\_index.md。里面写入下面这段就可以汉化了。\n1 2 3 --- title: 分类 --- 设置时区以避免文章不渲染 在站点根目录的config.yml里加上下面这段。\n1 2 # 设置时区 避免文章不渲染 timeZone: \u0026#34;Asia/Shanghai\u0026#34; 美化 全局使用自定义字体 Stack主题在中文下的默认字体效果不太行，于是搜索一番后搜到了怎么全局使用自定义字体。\n实际上搜到了好几种做法，不过我感觉下面这个方法最省事。\n我直接给出他的原文和链接，以方便阅读。\nhttps://blog.gezi.men/p/hugo-custom-global-font/\n\u0026mdash;以下是出处原始内容\u0026mdash;\n这里采用的是思源宋体，可自行更换其他字体\n字体样式：https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@400;700\u0026display=swap\n字体名：Noto Serif SC，即上方链接中family=后的字符串，+替换为空格\n在站点根目录新建文件 ./layouts/partials/head/custom.html，内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;style\u0026gt; :root { --sys-font-family: \u0026#34;Noto Serif SC\u0026#34;; --zh-font-family: \u0026#34;Noto Serif SC\u0026#34;; --base-font-family: \u0026#34;Noto Serif SC\u0026#34;; --code-font-family: \u0026#34;Noto Serif SC\u0026#34;; --article-font-family: \u0026#34;Noto Serif SC\u0026#34;; } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; (function () { const customFont = document.createElement(\u0026#34;link\u0026#34;); customFont.href = \u0026#34;https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@400;700\u0026amp;display=swap\u0026#34;; customFont.type = \u0026#34;text/css\u0026#34;; customFont.rel = \u0026#34;stylesheet\u0026#34;; document.head.appendChild(customFont); })(); \u0026lt;/script\u0026gt; \u0026mdash;以上是出处原始内容\u0026mdash;\n把头像区域居中 如果是昵称之类比较长的用户，可能感觉默认的视觉效果还不错。\n但是对于我这种昵称等都很短的用户就看起来不太行了。\n在站点根目录新建assets\\scss\\partials。\n复制themes\\hugo-theme-stack\\assets\\scss里的menu.scss和sidebar.scss。\n粘贴刚刚复制的到站点根目录的assets\\scss\\partials。\n修改站点根目录下assets\\scss\\partials\\menu.scss。\n下面那段是部分代码，只需要修改带注释的行，其他是原代码。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 .social-menu { list-style: none; padding: 0; margin: 0 auto; // 社交图标居中 display: flex; flex-direction: row; gap: 10px; svg { width: 24px; height: 24px; stroke: var(--body-text-color); stroke-width: 1.33; } } 修改站点根目录下assets\\scss\\partials\\sidebar.scss。 下面那段是部分代码，只需要修改带注释的行，其他是原代码。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 .sidebar header { z-index: 1; transition: box-shadow 0.5s ease; display: flex; flex-direction: column; gap: var(--sidebar-element-separation); @include respond(md) { padding: 0; } .site-avatar { position: relative; margin: 0 auto; // 站点头像居中 width: var(--sidebar-avatar-size); height: var(--sidebar-avatar-size); flex-shrink: 0; .site-logo { width: 100%; height: 100%; border-radius: 100%; box-shadow: var(--shadow-l1); } .emoji { position: absolute; width: var(--emoji-size); height: var(--emoji-size); line-height: var(--emoji-size); border-radius: 100%; bottom: 0; right: 0; text-align: center; font-size: var(--emoji-font-size); background-color: var(--card-background); box-shadow: var(--shadow-l2); } } .site-meta { display: flex; flex-direction: column; gap: 10px; justify-content: center; } .site-name { color: var(--accent-color); margin: 0 auto; // 站点名称文本居中 font-size: 1.6rem; @include respond(2xl) { font-size: 1.8rem; } } .site-description { color: var(--body-text-color); font-weight: normal; margin: 0 auto; // 站点描述文本居中 font-size: 1.4rem; @include respond(2xl) { font-size: 1.6rem; } } } 部署静态博客 把站点和构建的静态博客推送到同一个github储存库 我为了避免自定义的内容因为一些以外情况从本地消失，我决定把站点也一起推送到github储存库。\n在站点根目录config.yml里加上下面这段内容。\n1 2 3 4 # 构建静态的目录改为docs # 这样可以把hogo生成的站点一起推送到同一个github储存库 # 设置GitHub Pages使用docs即可 publishDir: docs 在.gitignore里写上下面这行，用来排除站点根目录的resources文件夹。\n1 /resources/ 这个文件夹是Hugo本地查看静态网站效果生成的缓存文件夹，没必要推送到github储存库。\n关于Git和GitHub Desktop 我把这两个都装了。\n我认为某些使用命令简单，某些使用图形化界面简单。\n一些有待解决的问题 点进分类后看见的 PAGE 在哪可以汉化？ 怎么把文章标题改的更大？目前和##的标题一样大，有点不协调。 ","date":"2022-09-25T12:00:11+08:00","permalink":"https://tu-kui.github.io/p/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%A4%87%E5%BF%98/","title":"静态博客搭建备忘"}]